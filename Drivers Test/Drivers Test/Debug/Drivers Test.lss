
Drivers Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000830  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eec  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093a  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009df  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a5  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000067c  00000000  00000000  00003335  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000039b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 16 04 	jmp	0x82c	; 0x82c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Button_init>:

EN_BUTTONError_t Button_init(uint8_t ledport, uint8_t ledpin)
{
	EN_BUTTONError_t BUTTON_error = BUTTON_OK;
	
	DIO_init(ledport, ledpin, INPUT);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_init>
	{
		BUTTON_error = BUTTON_OK;
	}

	return BUTTON_error;
}
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	08 95       	ret

00000076 <Button_read>:

EN_BUTTONError_t Button_read(uint8_t ledport, uint8_t ledpin, uint8_t *state)
{
	EN_BUTTONError_t BUTTON_error = BUTTON_OK;
	
	DIO_read(ledport, ledpin, state);
  76:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_read>
	{
		 BUTTON_error = BUTTON_OK;
	}

	return BUTTON_error;
}
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	08 95       	ret

0000007e <LED_init>:

EN_LEDError_t LED_init(uint8_t ledport, uint8_t ledpin)
{
	EN_LEDError_t LED_error = LED_OK;
	
	DIO_init(ledport, ledpin, OUTPUT);
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_init>
	{
		LED_error = LED_OK;
	}

	return LED_error;
}
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	08 95       	ret

00000088 <LED_on>:

EN_LEDError_t LED_on(uint8_t ledport, uint8_t ledpin)
{
	EN_LEDError_t LED_error = LED_OK;
	
	DIO_write(ledport, ledpin, HIGH);
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_write>
	{
		LED_error = LED_OK;
	}

	return LED_error;
}
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	08 95       	ret

00000092 <LED_off>:

EN_LEDError_t LED_off(uint8_t ledport, uint8_t ledpin)
{
	EN_LEDError_t LED_error = LED_OK;
	
	DIO_write(ledport, ledpin, LOW);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_write>
	{
		LED_error = LED_OK;
	}

	return LED_error;
}
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	08 95       	ret

0000009c <LED_Blink>:

EN_LEDError_t LED_Blink(uint8_t ledport, uint8_t ledpin)
{
		EN_LEDError_t LED_error = LED_OK;
	
		DIO_toggle(ledport, ledpin);
  9c:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_toggle>
		{
			LED_error = LED_OK;
		}

		return LED_error;
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	08 95       	ret

000000a4 <main>:
#include "ECUAL/LED Driver/LED.h" //LED Driver



int main(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	
		
		// DIO & LED Drivers Test init - Write - Toggle 
	
		LED_init(PORT_A, 0); // LED AND DIO init functions Test
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 3f 00 	call	0x7e	; 0x7e <LED_init>
	
		LED_on(PORT_A, 0);  // LED AND DIO Write functions Test
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 44 00 	call	0x88	; 0x88 <LED_on>
	
		Delay_ms(2000); // Timer0 Delay function Test
  be:	80 ed       	ldi	r24, 0xD0	; 208
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Delay_ms>
	
		LED_off(PORT_A, 0); // LED AND DIO Write functions Test
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 49 00 	call	0x92	; 0x92 <LED_off>
	
	
		for(int i = 0; i < 4; i++)
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <main+0x44>
		{
			LED_Blink(PORT_A, 0);         //LED AND DIO Toggle Functions test
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 4e 00 	call	0x9c	; 0x9c <LED_Blink>
			Delay_ms(250); 
  dc:	8a ef       	ldi	r24, 0xFA	; 250
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Delay_ms>
		Delay_ms(2000); // Timer0 Delay function Test
	
		LED_off(PORT_A, 0); // LED AND DIO Write functions Test
	
	
		for(int i = 0; i < 4; i++)
  e4:	0f 5f       	subi	r16, 0xFF	; 255
  e6:	1f 4f       	sbci	r17, 0xFF	; 255
  e8:	04 30       	cpi	r16, 0x04	; 4
  ea:	11 05       	cpc	r17, r1
  ec:	9c f3       	brlt	.-26     	; 0xd4 <main+0x30>
		}
	
	while(1)
	{
		// INT0 interrupt function test
		set_interrupet_init();
  ee:	0e 94 57 02 	call	0x4ae	; 0x4ae <set_interrupet_init>
			
		Button_init(PORT_D, 2); // initialize portD - pin 2 as input
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 36 00 	call	0x6c	; 0x6c <Button_init>

		// Button Driver Test
	
		uint8_t State = LOW; //Button state Variable
  fa:	19 82       	std	Y+1, r1	; 0x01
	
		Button_init(PORT_B, 0); //Button init Function test initialize pin 0 as input
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 36 00 	call	0x6c	; 0x6c <Button_init>
	
		Button_read(PORT_B, 0, &State);
 104:	ae 01       	movw	r20, r28
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 3b 00 	call	0x76	; 0x76 <Button_read>
	
		if(State == HIGH)
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	59 f7       	brne	.-42     	; 0xee <main+0x4a>
 118:	0b c0       	rjmp	.+22     	; 0x130 <main+0x8c>
		{
			for(int i = 0; i < 4; i++)
			{
				LED_Blink(PORT_A, 0);         //If Button is pressed Blink PortA - pin 0 LED
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 4e 00 	call	0x9c	; 0x9c <LED_Blink>
				Delay_ms(250);
 122:	8a ef       	ldi	r24, 0xFA	; 250
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Delay_ms>
	
		Button_read(PORT_B, 0, &State);
	
		if(State == HIGH)
		{
			for(int i = 0; i < 4; i++)
 12a:	0f 5f       	subi	r16, 0xFF	; 255
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0x90>
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	04 30       	cpi	r16, 0x04	; 4
 136:	11 05       	cpc	r17, r1
 138:	84 f3       	brlt	.-32     	; 0x11a <main+0x76>
 13a:	d9 cf       	rjmp	.-78     	; 0xee <main+0x4a>

0000013c <__vector_1>:
}


//interrupt Function
ISR(EXT_INT_0)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
	
	LED_init(PORT_C, 0);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 3f 00 	call	0x7e	; 0x7e <LED_init>
	LED_on(PORT_C, 0);  
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 44 00 	call	0x88	; 0x88 <LED_on>
	Delay_ms(1000);         // if Button is pressed   PortA - Pin 0 LED Will Turn On For 1 Second
 156:	88 ee       	ldi	r24, 0xE8	; 232
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Delay_ms>
	LED_off(PORT_C, 0); 
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 49 00 	call	0x92	; 0x92 <LED_off>
	
	
	main();    // Back To main Function again
 166:	0e 94 52 00 	call	0xa4	; 0xa4 <main>

0000016a <DIO_init>:
//DIO Functions
EN_DIOError_t DIO_init(uint8_t PortX, uint8_t PinNum, uint8_t direction)
{
	EN_DIOError_t DIO_error = DIO_OK;
	
	switch(PortX)
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	31 f1       	breq	.+76     	; 0x1ba <DIO_init+0x50>
 16e:	38 f0       	brcs	.+14     	; 0x17e <DIO_init+0x14>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	09 f4       	brne	.+2      	; 0x176 <DIO_init+0xc>
 174:	40 c0       	rjmp	.+128    	; 0x1f6 <DIO_init+0x8c>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	09 f4       	brne	.+2      	; 0x17c <DIO_init+0x12>
 17a:	5a c0       	rjmp	.+180    	; 0x230 <DIO_init+0xc6>
 17c:	76 c0       	rjmp	.+236    	; 0x26a <DIO_init+0x100>
	{
		//case 1
		case PORT_A:
			if (direction == INPUT)
 17e:	41 11       	cpse	r20, r1
 180:	0d c0       	rjmp	.+26     	; 0x19c <DIO_init+0x32>
			{
				CLEAR_BIT(PORTA, PinNum); // SET Pin To INPUT State
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_init+0x24>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_init+0x20>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	8b bb       	out	0x1b, r24	; 27
			}
			
			break;
	}
	
	return DIO_error;
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret
		case PORT_A:
			if (direction == INPUT)
			{
				CLEAR_BIT(PORTA, PinNum); // SET Pin To INPUT State
			}
			else if (direction == OUTPUT)
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <DIO_init+0x38>
 1a0:	66 c0       	rjmp	.+204    	; 0x26e <DIO_init+0x104>
			{
				SET_BIT(PORTA, PinNum);  //SET Pin To OUTPUT State
 1a2:	2b b3       	in	r18, 0x1b	; 27
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_init+0x44>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_init+0x40>
 1b2:	82 2b       	or	r24, r18
 1b4:	8b bb       	out	0x1b, r24	; 27
			}
			
			break;
	}
	
	return DIO_error;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
			}
			break;
		
		//case 2 
		case PORT_B:
			if (direction == INPUT)
 1ba:	41 11       	cpse	r20, r1
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <DIO_init+0x6e>
			{
				CLEAR_BIT(PORTB, PinNum); // SET Pin To INPUT State
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_init+0x60>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_init+0x5c>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
			}
			
			break;
	}
	
	return DIO_error;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
		case PORT_B:
			if (direction == INPUT)
			{
				CLEAR_BIT(PORTB, PinNum); // SET Pin To INPUT State
			}
			else if (direction == OUTPUT)
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_init+0x74>
 1dc:	4a c0       	rjmp	.+148    	; 0x272 <DIO_init+0x108>
			{
				SET_BIT(PORTB, PinNum);  //SET Pin To OUTPUT State
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_init+0x80>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_init+0x7c>
 1ee:	82 2b       	or	r24, r18
 1f0:	88 bb       	out	0x18, r24	; 24
			}
			
			break;
	}
	
	return DIO_error;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
			
			break;
		
		//case 3
		case PORT_C:
			if (direction == INPUT)
 1f6:	41 11       	cpse	r20, r1
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <DIO_init+0xaa>
			{
				CLEAR_BIT(PORTC, PinNum); // SET Pin To INPUT State
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_init+0x9c>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_init+0x98>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
			}
			
			break;
	}
	
	return DIO_error;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret
		case PORT_C:
			if (direction == INPUT)
			{
				CLEAR_BIT(PORTC, PinNum); // SET Pin To INPUT State
			}
			else if (direction == OUTPUT)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	79 f5       	brne	.+94     	; 0x276 <DIO_init+0x10c>
			{
				SET_BIT(PORTC, PinNum);  //SET Pin To OUTPUT State
 218:	25 b3       	in	r18, 0x15	; 21
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_init+0xba>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_init+0xb6>
 228:	82 2b       	or	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
			}
			
			break;
	}
	
	return DIO_error;
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret
			
			break;
		
		//case 4
		case PORT_D:
			if (direction == INPUT)
 230:	41 11       	cpse	r20, r1
 232:	0d c0       	rjmp	.+26     	; 0x24e <DIO_init+0xe4>
			{
				CLEAR_BIT(PORTD, PinNum); // SET Pin To INPUT State
 234:	22 b3       	in	r18, 0x12	; 18
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_init+0xd6>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_init+0xd2>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	82 bb       	out	0x12, r24	; 18
			}
			
			break;
	}
	
	return DIO_error;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
		case PORT_D:
			if (direction == INPUT)
			{
				CLEAR_BIT(PORTD, PinNum); // SET Pin To INPUT State
			}
			else if (direction == OUTPUT)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	a1 f4       	brne	.+40     	; 0x27a <DIO_init+0x110>
			{
				SET_BIT(PORTD, PinNum);  //SET Pin To OUTPUT State
 252:	22 b3       	in	r18, 0x12	; 18
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_init+0xf4>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_init+0xf0>
 262:	82 2b       	or	r24, r18
 264:	82 bb       	out	0x12, r24	; 18
			}
			
			break;
	}
	
	return DIO_error;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	08 95       	ret
				SET_BIT(PORTA, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
			  // ERROR
			  return DIO_ERROR;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	08 95       	ret
				SET_BIT(PORTB, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				 return DIO_ERROR;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	08 95       	ret
				SET_BIT(PORTC, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	08 95       	ret
				SET_BIT(PORTD, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 27a:	81 e0       	ldi	r24, 0x01	; 1
			
			break;
	}
	
	return DIO_error;
}
 27c:	08 95       	ret

0000027e <DIO_write>:

EN_DIOError_t DIO_write(uint8_t PortX, uint8_t PinNum, uint8_t Value)
{
	EN_DIOError_t DIO_error = DIO_OK;
	
	switch(PortX)
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	31 f1       	breq	.+76     	; 0x2ce <DIO_write+0x50>
 282:	38 f0       	brcs	.+14     	; 0x292 <DIO_write+0x14>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	09 f4       	brne	.+2      	; 0x28a <DIO_write+0xc>
 288:	40 c0       	rjmp	.+128    	; 0x30a <DIO_write+0x8c>
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	09 f4       	brne	.+2      	; 0x290 <DIO_write+0x12>
 28e:	5a c0       	rjmp	.+180    	; 0x344 <DIO_write+0xc6>
 290:	76 c0       	rjmp	.+236    	; 0x37e <DIO_write+0x100>
	{
		//case 1
		case PORT_A:
			if (Value == LOW)
 292:	41 11       	cpse	r20, r1
 294:	0d c0       	rjmp	.+26     	; 0x2b0 <DIO_write+0x32>
			{
				CLEAR_BIT(DDRA, PinNum); // SET Pin To INPUT State
 296:	2a b3       	in	r18, 0x1a	; 26
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_write+0x24>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_write+0x20>
 2a6:	80 95       	com	r24
 2a8:	82 23       	and	r24, r18
 2aa:	8a bb       	out	0x1a, r24	; 26
			}
			
			break;
	}
	
	return DIO_error;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret
		case PORT_A:
			if (Value == LOW)
			{
				CLEAR_BIT(DDRA, PinNum); // SET Pin To INPUT State
			}
			else if (Value == HIGH)
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <DIO_write+0x38>
 2b4:	66 c0       	rjmp	.+204    	; 0x382 <DIO_write+0x104>
			{
				SET_BIT(DDRA, PinNum);  //SET Pin To OUTPUT State
 2b6:	2a b3       	in	r18, 0x1a	; 26
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_write+0x44>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_write+0x40>
 2c6:	82 2b       	or	r24, r18
 2c8:	8a bb       	out	0x1a, r24	; 26
			}
			
			break;
	}
	
	return DIO_error;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret
			
			break;
		
		//case 2
		case PORT_B:
			if (Value == LOW)
 2ce:	41 11       	cpse	r20, r1
 2d0:	0d c0       	rjmp	.+26     	; 0x2ec <DIO_write+0x6e>
			{
				CLEAR_BIT(DDRB, PinNum); // SET Pin To INPUT State
 2d2:	27 b3       	in	r18, 0x17	; 23
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_write+0x60>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_write+0x5c>
 2e2:	80 95       	com	r24
 2e4:	82 23       	and	r24, r18
 2e6:	87 bb       	out	0x17, r24	; 23
			}
			
			break;
	}
	
	return DIO_error;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
		case PORT_B:
			if (Value == LOW)
			{
				CLEAR_BIT(DDRB, PinNum); // SET Pin To INPUT State
			}
			else if (Value == HIGH)
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <DIO_write+0x74>
 2f0:	4a c0       	rjmp	.+148    	; 0x386 <DIO_write+0x108>
			{
				SET_BIT(DDRB, PinNum);  //SET Pin To OUTPUT State
 2f2:	27 b3       	in	r18, 0x17	; 23
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_write+0x80>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_write+0x7c>
 302:	82 2b       	or	r24, r18
 304:	87 bb       	out	0x17, r24	; 23
			}
			
			break;
	}
	
	return DIO_error;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret
			
			break;
		
		//case 3
			case PORT_C:
			if (Value == LOW)
 30a:	41 11       	cpse	r20, r1
 30c:	0d c0       	rjmp	.+26     	; 0x328 <DIO_write+0xaa>
			{
				CLEAR_BIT(DDRC, PinNum); // SET Pin To INPUT State
 30e:	24 b3       	in	r18, 0x14	; 20
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_write+0x9c>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_write+0x98>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	84 bb       	out	0x14, r24	; 20
			}
			
			break;
	}
	
	return DIO_error;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
			case PORT_C:
			if (Value == LOW)
			{
				CLEAR_BIT(DDRC, PinNum); // SET Pin To INPUT State
			}
			else if (Value == HIGH)
 328:	41 30       	cpi	r20, 0x01	; 1
 32a:	79 f5       	brne	.+94     	; 0x38a <DIO_write+0x10c>
			{
				SET_BIT(DDRC, PinNum);  //SET Pin To OUTPUT State
 32c:	24 b3       	in	r18, 0x14	; 20
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_write+0xba>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_write+0xb6>
 33c:	82 2b       	or	r24, r18
 33e:	84 bb       	out	0x14, r24	; 20
			}
			
			break;
	}
	
	return DIO_error;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
			
			break;
		
		//case 4
			case PORT_D:
			if (Value == LOW)
 344:	41 11       	cpse	r20, r1
 346:	0d c0       	rjmp	.+26     	; 0x362 <DIO_write+0xe4>
			{
				CLEAR_BIT(DDRD, PinNum); // SET Pin To INPUT State
 348:	21 b3       	in	r18, 0x11	; 17
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_write+0xd6>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_write+0xd2>
 358:	80 95       	com	r24
 35a:	82 23       	and	r24, r18
 35c:	81 bb       	out	0x11, r24	; 17
			}
			
			break;
	}
	
	return DIO_error;
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	08 95       	ret
			case PORT_D:
			if (Value == LOW)
			{
				CLEAR_BIT(DDRD, PinNum); // SET Pin To INPUT State
			}
			else if (Value == HIGH)
 362:	41 30       	cpi	r20, 0x01	; 1
 364:	a1 f4       	brne	.+40     	; 0x38e <DIO_write+0x110>
			{
				SET_BIT(DDRD, PinNum);  //SET Pin To OUTPUT State
 366:	21 b3       	in	r18, 0x11	; 17
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_write+0xf4>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_write+0xf0>
 376:	82 2b       	or	r24, r18
 378:	81 bb       	out	0x11, r24	; 17
			}
			
			break;
	}
	
	return DIO_error;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 95       	ret
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret
				SET_BIT(DDRA, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	08 95       	ret
				SET_BIT(DDRB, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	08 95       	ret
				SET_BIT(DDRC, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	08 95       	ret
				SET_BIT(DDRD, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 38e:	81 e0       	ldi	r24, 0x01	; 1
			
			break;
	}
	
	return DIO_error;
}
 390:	08 95       	ret

00000392 <DIO_toggle>:

EN_DIOError_t DIO_toggle(uint8_t PortX, uint8_t PinNum)
{
	EN_DIOError_t DIO_error = DIO_OK;
	
	switch(PortX)
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	89 f0       	breq	.+34     	; 0x3b8 <DIO_toggle+0x26>
 396:	28 f0       	brcs	.+10     	; 0x3a2 <DIO_toggle+0x10>
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	c9 f0       	breq	.+50     	; 0x3ce <DIO_toggle+0x3c>
 39c:	83 30       	cpi	r24, 0x03	; 3
 39e:	11 f1       	breq	.+68     	; 0x3e4 <DIO_toggle+0x52>
 3a0:	2b c0       	rjmp	.+86     	; 0x3f8 <DIO_toggle+0x66>
	{
		case PORT_A:
		FLIP_BIT(DDRA, PinNum);
 3a2:	2a b3       	in	r18, 0x1a	; 26
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_toggle+0x1c>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_toggle+0x18>
 3b2:	82 27       	eor	r24, r18
 3b4:	8a bb       	out	0x1a, r24	; 26
 3b6:	20 c0       	rjmp	.+64     	; 0x3f8 <DIO_toggle+0x66>
		}
		
		break;
		
		case PORT_B:
		FLIP_BIT(DDRB, PinNum);
 3b8:	27 b3       	in	r18, 0x17	; 23
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_toggle+0x32>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_toggle+0x2e>
 3c8:	82 27       	eor	r24, r18
 3ca:	87 bb       	out	0x17, r24	; 23
 3cc:	15 c0       	rjmp	.+42     	; 0x3f8 <DIO_toggle+0x66>
		}
		
		break;
		
		case PORT_C:
		FLIP_BIT(DDRC, PinNum);
 3ce:	24 b3       	in	r18, 0x14	; 20
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_toggle+0x48>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_toggle+0x44>
 3de:	82 27       	eor	r24, r18
 3e0:	84 bb       	out	0x14, r24	; 20
 3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <DIO_toggle+0x66>
		}
		
		break;
		
		case PORT_D:
		FLIP_BIT(DDRD, PinNum);
 3e4:	21 b3       	in	r18, 0x11	; 17
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_toggle+0x5e>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_toggle+0x5a>
 3f4:	82 27       	eor	r24, r18
 3f6:	81 bb       	out	0x11, r24	; 17
		
		break;
	}
	
	return DIO_error;
}
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret

000003fc <DIO_read>:

EN_DIOError_t DIO_read(uint8_t PortX, uint8_t PinNum, uint8_t* value)
{
	EN_DIOError_t DIO_error = DIO_OK;
	
	switch (PortX)
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	d1 f0       	breq	.+52     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 400:	28 f0       	brcs	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	59 f1       	breq	.+86     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 406:	83 30       	cpi	r24, 0x03	; 3
 408:	e9 f1       	breq	.+122    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 40a:	4f c0       	rjmp	.+158    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
	{
		case PORT_A:
		
			 *value = CHECK_BIT(PINA, PinNum);
 40c:	29 b3       	in	r18, 0x19	; 25
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	06 2e       	mov	r0, r22
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	82 23       	and	r24, r18
 420:	89 bb       	out	0x19, r24	; 25
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	95 95       	asr	r25
 428:	87 95       	ror	r24
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	fa 01       	movw	r30, r20
 430:	80 83       	st	Z, r24
 432:	3b c0       	rjmp	.+118    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			 }
			 
		break;
		
		case PORT_B:
			*value = CHECK_BIT(PINB, PinNum);
 434:	26 b3       	in	r18, 0x16	; 22
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	06 2e       	mov	r0, r22
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	82 23       	and	r24, r18
 448:	86 bb       	out	0x16, r24	; 22
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	95 95       	asr	r25
 450:	87 95       	ror	r24
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	fa 01       	movw	r30, r20
 458:	80 83       	st	Z, r24
 45a:	27 c0       	rjmp	.+78     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			}
			
		break;
		
		case PORT_C:
			*value = CHECK_BIT(PINC, PinNum);
 45c:	23 b3       	in	r18, 0x13	; 19
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	06 2e       	mov	r0, r22
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	82 23       	and	r24, r18
 470:	83 bb       	out	0x13, r24	; 19
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	95 95       	asr	r25
 478:	87 95       	ror	r24
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	fa 01       	movw	r30, r20
 480:	80 83       	st	Z, r24
 482:	13 c0       	rjmp	.+38     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			}
			
		break;
		
		case PORT_D:
			*value = CHECK_BIT(PIND, PinNum);
 484:	20 b3       	in	r18, 0x10	; 16
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	06 2e       	mov	r0, r22
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	82 23       	and	r24, r18
 498:	80 bb       	out	0x10, r24	; 16
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	fa 01       	movw	r30, r20
 4a8:	80 83       	st	Z, r24
			}
			
		break;
	}
	return DIO_error;
}
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	08 95       	ret

000004ae <set_interrupet_init>:
EN_INTERRUPTSError_t set_interrupet_init(void)
{
	EN_INTERRUPTSError_t INTERRUPTS_error = INTERRUPTS_OK;
	/*set interrupt using assembly code*/
	
	__asm__ __volatile__ ("sei" ::: "memory");
 4ae:	78 94       	sei
	
	/*choosing the external interrupt sense - sense on rising edge*/
	
	MCUCR |=  (1<<ISC00) | (1<<ISC01);
 4b0:	85 b7       	in	r24, 0x35	; 53
 4b2:	83 60       	ori	r24, 0x03	; 3
 4b4:	85 bf       	out	0x35, r24	; 53
	
	/*enabling the external interrupt 0 - INT0*/
	GICR |= (1<<INT0);
 4b6:	8b b7       	in	r24, 0x3b	; 59
 4b8:	80 64       	ori	r24, 0x40	; 64
 4ba:	8b bf       	out	0x3b, r24	; 59
	{
		INTERRUPTS_error = INTERRUPTS_OK;
	}
	
	return INTERRUPTS_error;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	08 95       	ret

000004c0 <Delay_Rgisters_init>:
// TIMER0 initialization
EN_TIMERSError_t Delay_Rgisters_init(void)
{
	EN_TIMERSError_t TIMER_Error = TIMERS_OK;
	
	TCCR0 = 0x00; // normal mode
 4c0:	13 be       	out	0x33, r1	; 51
	
	TCNT0 = 0x00;
 4c2:	12 be       	out	0x32, r1	; 50
	{
		TIMER_Error = TIMERS_OK;
	}

	return TIMER_Error;
}
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret

000004c8 <Delay_ms>:

EN_TIMERSError_t Delay_ms(uint32_t delay)
{
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	ec 01       	movw	r28, r24
	EN_TIMERSError_t TIMER_Error = TIMERS_OK;
	
	Delay_Rgisters_init(); // Set timer to normal mode
 4ce:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Delay_Rgisters_init>
	
	uint32_t Num_Of_Overflowes = (uint32_t)ceil( ((delay * pow(10,3)) / (pow(2, 8) * FCPU)) ); // calculate number of Overflows based on desired Delay (mile second)
 4d2:	be 01       	movw	r22, r28
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__floatunsisf>
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	4a e7       	ldi	r20, 0x7A	; 122
 4e2:	54 e4       	ldi	r21, 0x44	; 68
 4e4:	0e 94 81 03 	call	0x702	; 0x702 <__mulsf3>
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e8       	ldi	r20, 0x80	; 128
 4ee:	5b e3       	ldi	r21, 0x3B	; 59
 4f0:	0e 94 81 03 	call	0x702	; 0x702 <__mulsf3>
 4f4:	0e 94 94 02 	call	0x528	; 0x528 <ceil>
 4f8:	0e 94 ab 02 	call	0x556	; 0x556 <__fixunssfsi>
	
	int Overflowes_Counter = 0; // initialize overflow counter
	
	TCCR0 |= (1<<0); // Timer start
 4fc:	83 b7       	in	r24, 0x33	; 51
 4fe:	81 60       	ori	r24, 0x01	; 1
 500:	83 bf       	out	0x33, r24	; 51
	
	Delay_Rgisters_init(); // Set timer to normal mode
	
	uint32_t Num_Of_Overflowes = (uint32_t)ceil( ((delay * pow(10,3)) / (pow(2, 8) * FCPU)) ); // calculate number of Overflows based on desired Delay (mile second)
	
	int Overflowes_Counter = 0; // initialize overflow counter
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
	
	TCCR0 |= (1<<0); // Timer start
	
	while(Overflowes_Counter < Num_Of_Overflowes)
 506:	08 c0       	rjmp	.+16     	; 0x518 <Delay_ms+0x50>
	{
		while((TIFR & (1<<0)) == 0); //wait until overflow Flag is High
 508:	08 b6       	in	r0, 0x38	; 56
 50a:	00 fe       	sbrs	r0, 0
 50c:	fd cf       	rjmp	.-6      	; 0x508 <Delay_ms+0x40>
		
		TIFR |= (1<<0); //clear Overflow Flag
 50e:	88 b7       	in	r24, 0x38	; 56
 510:	81 60       	ori	r24, 0x01	; 1
 512:	88 bf       	out	0x38, r24	; 56
		
		Overflowes_Counter++;
 514:	2f 5f       	subi	r18, 0xFF	; 255
 516:	3f 4f       	sbci	r19, 0xFF	; 255
	
	int Overflowes_Counter = 0; // initialize overflow counter
	
	TCCR0 |= (1<<0); // Timer start
	
	while(Overflowes_Counter < Num_Of_Overflowes)
 518:	26 17       	cp	r18, r22
 51a:	37 07       	cpc	r19, r23
 51c:	a8 f3       	brcs	.-22     	; 0x508 <Delay_ms+0x40>
		Overflowes_Counter++;
	}
	
	Overflowes_Counter = 0;
	
	TCCR0 =0x00; //Timer stop
 51e:	13 be       	out	0x33, r1	; 51
	{
		TIMER_Error = TIMERS_OK;
	}

	return TIMER_Error;
}
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <ceil>:
 528:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_trunc>
 52c:	90 f0       	brcs	.+36     	; 0x552 <ceil+0x2a>
 52e:	9f 37       	cpi	r25, 0x7F	; 127
 530:	48 f4       	brcc	.+18     	; 0x544 <ceil+0x1c>
 532:	91 11       	cpse	r25, r1
 534:	16 f4       	brtc	.+4      	; 0x53a <ceil+0x12>
 536:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_szero>
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	9f e3       	ldi	r25, 0x3F	; 63
 542:	08 95       	ret
 544:	26 f0       	brts	.+8      	; 0x54e <ceil+0x26>
 546:	1b 16       	cp	r1, r27
 548:	61 1d       	adc	r22, r1
 54a:	71 1d       	adc	r23, r1
 54c:	81 1d       	adc	r24, r1
 54e:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_mintl>
 552:	0c 94 32 03 	jmp	0x664	; 0x664 <__fp_mpack>

00000556 <__fixunssfsi>:
 556:	0e 94 48 03 	call	0x690	; 0x690 <__fp_splitA>
 55a:	88 f0       	brcs	.+34     	; 0x57e <__fixunssfsi+0x28>
 55c:	9f 57       	subi	r25, 0x7F	; 127
 55e:	98 f0       	brcs	.+38     	; 0x586 <__fixunssfsi+0x30>
 560:	b9 2f       	mov	r27, r25
 562:	99 27       	eor	r25, r25
 564:	b7 51       	subi	r27, 0x17	; 23
 566:	b0 f0       	brcs	.+44     	; 0x594 <__fixunssfsi+0x3e>
 568:	e1 f0       	breq	.+56     	; 0x5a2 <__fixunssfsi+0x4c>
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 1f       	adc	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	1a f0       	brmi	.+6      	; 0x57a <__fixunssfsi+0x24>
 574:	ba 95       	dec	r27
 576:	c9 f7       	brne	.-14     	; 0x56a <__fixunssfsi+0x14>
 578:	14 c0       	rjmp	.+40     	; 0x5a2 <__fixunssfsi+0x4c>
 57a:	b1 30       	cpi	r27, 0x01	; 1
 57c:	91 f0       	breq	.+36     	; 0x5a2 <__fixunssfsi+0x4c>
 57e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_zero>
 582:	b1 e0       	ldi	r27, 0x01	; 1
 584:	08 95       	ret
 586:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_zero>
 58a:	67 2f       	mov	r22, r23
 58c:	78 2f       	mov	r23, r24
 58e:	88 27       	eor	r24, r24
 590:	b8 5f       	subi	r27, 0xF8	; 248
 592:	39 f0       	breq	.+14     	; 0x5a2 <__fixunssfsi+0x4c>
 594:	b9 3f       	cpi	r27, 0xF9	; 249
 596:	cc f3       	brlt	.-14     	; 0x58a <__fixunssfsi+0x34>
 598:	86 95       	lsr	r24
 59a:	77 95       	ror	r23
 59c:	67 95       	ror	r22
 59e:	b3 95       	inc	r27
 5a0:	d9 f7       	brne	.-10     	; 0x598 <__fixunssfsi+0x42>
 5a2:	3e f4       	brtc	.+14     	; 0x5b2 <__fixunssfsi+0x5c>
 5a4:	90 95       	com	r25
 5a6:	80 95       	com	r24
 5a8:	70 95       	com	r23
 5aa:	61 95       	neg	r22
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	8f 4f       	sbci	r24, 0xFF	; 255
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	08 95       	ret

000005b4 <__floatunsisf>:
 5b4:	e8 94       	clt
 5b6:	09 c0       	rjmp	.+18     	; 0x5ca <__floatsisf+0x12>

000005b8 <__floatsisf>:
 5b8:	97 fb       	bst	r25, 7
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__floatsisf+0x12>
 5bc:	90 95       	com	r25
 5be:	80 95       	com	r24
 5c0:	70 95       	com	r23
 5c2:	61 95       	neg	r22
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	99 23       	and	r25, r25
 5cc:	a9 f0       	breq	.+42     	; 0x5f8 <__floatsisf+0x40>
 5ce:	f9 2f       	mov	r31, r25
 5d0:	96 e9       	ldi	r25, 0x96	; 150
 5d2:	bb 27       	eor	r27, r27
 5d4:	93 95       	inc	r25
 5d6:	f6 95       	lsr	r31
 5d8:	87 95       	ror	r24
 5da:	77 95       	ror	r23
 5dc:	67 95       	ror	r22
 5de:	b7 95       	ror	r27
 5e0:	f1 11       	cpse	r31, r1
 5e2:	f8 cf       	rjmp	.-16     	; 0x5d4 <__floatsisf+0x1c>
 5e4:	fa f4       	brpl	.+62     	; 0x624 <__floatsisf+0x6c>
 5e6:	bb 0f       	add	r27, r27
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__floatsisf+0x36>
 5ea:	60 ff       	sbrs	r22, 0
 5ec:	1b c0       	rjmp	.+54     	; 0x624 <__floatsisf+0x6c>
 5ee:	6f 5f       	subi	r22, 0xFF	; 255
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	16 c0       	rjmp	.+44     	; 0x624 <__floatsisf+0x6c>
 5f8:	88 23       	and	r24, r24
 5fa:	11 f0       	breq	.+4      	; 0x600 <__floatsisf+0x48>
 5fc:	96 e9       	ldi	r25, 0x96	; 150
 5fe:	11 c0       	rjmp	.+34     	; 0x622 <__floatsisf+0x6a>
 600:	77 23       	and	r23, r23
 602:	21 f0       	breq	.+8      	; 0x60c <__floatsisf+0x54>
 604:	9e e8       	ldi	r25, 0x8E	; 142
 606:	87 2f       	mov	r24, r23
 608:	76 2f       	mov	r23, r22
 60a:	05 c0       	rjmp	.+10     	; 0x616 <__floatsisf+0x5e>
 60c:	66 23       	and	r22, r22
 60e:	71 f0       	breq	.+28     	; 0x62c <__floatsisf+0x74>
 610:	96 e8       	ldi	r25, 0x86	; 134
 612:	86 2f       	mov	r24, r22
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	2a f0       	brmi	.+10     	; 0x624 <__floatsisf+0x6c>
 61a:	9a 95       	dec	r25
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	da f7       	brpl	.-10     	; 0x61a <__floatsisf+0x62>
 624:	88 0f       	add	r24, r24
 626:	96 95       	lsr	r25
 628:	87 95       	ror	r24
 62a:	97 f9       	bld	r25, 7
 62c:	08 95       	ret

0000062e <__fp_mintl>:
 62e:	88 23       	and	r24, r24
 630:	71 f4       	brne	.+28     	; 0x64e <__fp_mintl+0x20>
 632:	77 23       	and	r23, r23
 634:	21 f0       	breq	.+8      	; 0x63e <__fp_mintl+0x10>
 636:	98 50       	subi	r25, 0x08	; 8
 638:	87 2b       	or	r24, r23
 63a:	76 2f       	mov	r23, r22
 63c:	07 c0       	rjmp	.+14     	; 0x64c <__fp_mintl+0x1e>
 63e:	66 23       	and	r22, r22
 640:	11 f4       	brne	.+4      	; 0x646 <__fp_mintl+0x18>
 642:	99 27       	eor	r25, r25
 644:	0d c0       	rjmp	.+26     	; 0x660 <__fp_mintl+0x32>
 646:	90 51       	subi	r25, 0x10	; 16
 648:	86 2b       	or	r24, r22
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	2a f0       	brmi	.+10     	; 0x65a <__fp_mintl+0x2c>
 650:	9a 95       	dec	r25
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	da f7       	brpl	.-10     	; 0x650 <__fp_mintl+0x22>
 65a:	88 0f       	add	r24, r24
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
 660:	97 f9       	bld	r25, 7
 662:	08 95       	ret

00000664 <__fp_mpack>:
 664:	9f 3f       	cpi	r25, 0xFF	; 255
 666:	31 f0       	breq	.+12     	; 0x674 <__fp_mpack_finite+0xc>

00000668 <__fp_mpack_finite>:
 668:	91 50       	subi	r25, 0x01	; 1
 66a:	20 f4       	brcc	.+8      	; 0x674 <__fp_mpack_finite+0xc>
 66c:	87 95       	ror	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b7 95       	ror	r27
 674:	88 0f       	add	r24, r24
 676:	91 1d       	adc	r25, r1
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	97 f9       	bld	r25, 7
 67e:	08 95       	ret

00000680 <__fp_split3>:
 680:	57 fd       	sbrc	r21, 7
 682:	90 58       	subi	r25, 0x80	; 128
 684:	44 0f       	add	r20, r20
 686:	55 1f       	adc	r21, r21
 688:	59 f0       	breq	.+22     	; 0x6a0 <__fp_splitA+0x10>
 68a:	5f 3f       	cpi	r21, 0xFF	; 255
 68c:	71 f0       	breq	.+28     	; 0x6aa <__fp_splitA+0x1a>
 68e:	47 95       	ror	r20

00000690 <__fp_splitA>:
 690:	88 0f       	add	r24, r24
 692:	97 fb       	bst	r25, 7
 694:	99 1f       	adc	r25, r25
 696:	61 f0       	breq	.+24     	; 0x6b0 <__fp_splitA+0x20>
 698:	9f 3f       	cpi	r25, 0xFF	; 255
 69a:	79 f0       	breq	.+30     	; 0x6ba <__fp_splitA+0x2a>
 69c:	87 95       	ror	r24
 69e:	08 95       	ret
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	14 06       	cpc	r1, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	f2 cf       	rjmp	.-28     	; 0x68e <__fp_split3+0xe>
 6aa:	46 95       	lsr	r20
 6ac:	f1 df       	rcall	.-30     	; 0x690 <__fp_splitA>
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <__fp_splitA+0x30>
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	f1 cf       	rjmp	.-30     	; 0x69c <__fp_splitA+0xc>
 6ba:	86 95       	lsr	r24
 6bc:	71 05       	cpc	r23, r1
 6be:	61 05       	cpc	r22, r1
 6c0:	08 94       	sec
 6c2:	08 95       	ret

000006c4 <__fp_trunc>:
 6c4:	0e 94 48 03 	call	0x690	; 0x690 <__fp_splitA>
 6c8:	a0 f0       	brcs	.+40     	; 0x6f2 <__fp_trunc+0x2e>
 6ca:	be e7       	ldi	r27, 0x7E	; 126
 6cc:	b9 17       	cp	r27, r25
 6ce:	88 f4       	brcc	.+34     	; 0x6f2 <__fp_trunc+0x2e>
 6d0:	bb 27       	eor	r27, r27
 6d2:	9f 38       	cpi	r25, 0x8F	; 143
 6d4:	60 f4       	brcc	.+24     	; 0x6ee <__fp_trunc+0x2a>
 6d6:	16 16       	cp	r1, r22
 6d8:	b1 1d       	adc	r27, r1
 6da:	67 2f       	mov	r22, r23
 6dc:	78 2f       	mov	r23, r24
 6de:	88 27       	eor	r24, r24
 6e0:	98 5f       	subi	r25, 0xF8	; 248
 6e2:	f7 cf       	rjmp	.-18     	; 0x6d2 <__fp_trunc+0xe>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b1 1d       	adc	r27, r1
 6ec:	93 95       	inc	r25
 6ee:	96 39       	cpi	r25, 0x96	; 150
 6f0:	c8 f3       	brcs	.-14     	; 0x6e4 <__fp_trunc+0x20>
 6f2:	08 95       	ret

000006f4 <__fp_zero>:
 6f4:	e8 94       	clt

000006f6 <__fp_szero>:
 6f6:	bb 27       	eor	r27, r27
 6f8:	66 27       	eor	r22, r22
 6fa:	77 27       	eor	r23, r23
 6fc:	cb 01       	movw	r24, r22
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__mulsf3>:
 702:	0e 94 94 03 	call	0x728	; 0x728 <__mulsf3x>
 706:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_round>
 70a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_pscA>
 70e:	38 f0       	brcs	.+14     	; 0x71e <__mulsf3+0x1c>
 710:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_pscB>
 714:	20 f0       	brcs	.+8      	; 0x71e <__mulsf3+0x1c>
 716:	95 23       	and	r25, r21
 718:	11 f0       	breq	.+4      	; 0x71e <__mulsf3+0x1c>
 71a:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 71e:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_nan>
 722:	11 24       	eor	r1, r1
 724:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_szero>

00000728 <__mulsf3x>:
 728:	0e 94 40 03 	call	0x680	; 0x680 <__fp_split3>
 72c:	70 f3       	brcs	.-36     	; 0x70a <__mulsf3+0x8>

0000072e <__mulsf3_pse>:
 72e:	95 9f       	mul	r25, r21
 730:	c1 f3       	breq	.-16     	; 0x722 <__mulsf3+0x20>
 732:	95 0f       	add	r25, r21
 734:	50 e0       	ldi	r21, 0x00	; 0
 736:	55 1f       	adc	r21, r21
 738:	62 9f       	mul	r22, r18
 73a:	f0 01       	movw	r30, r0
 73c:	72 9f       	mul	r23, r18
 73e:	bb 27       	eor	r27, r27
 740:	f0 0d       	add	r31, r0
 742:	b1 1d       	adc	r27, r1
 744:	63 9f       	mul	r22, r19
 746:	aa 27       	eor	r26, r26
 748:	f0 0d       	add	r31, r0
 74a:	b1 1d       	adc	r27, r1
 74c:	aa 1f       	adc	r26, r26
 74e:	64 9f       	mul	r22, r20
 750:	66 27       	eor	r22, r22
 752:	b0 0d       	add	r27, r0
 754:	a1 1d       	adc	r26, r1
 756:	66 1f       	adc	r22, r22
 758:	82 9f       	mul	r24, r18
 75a:	22 27       	eor	r18, r18
 75c:	b0 0d       	add	r27, r0
 75e:	a1 1d       	adc	r26, r1
 760:	62 1f       	adc	r22, r18
 762:	73 9f       	mul	r23, r19
 764:	b0 0d       	add	r27, r0
 766:	a1 1d       	adc	r26, r1
 768:	62 1f       	adc	r22, r18
 76a:	83 9f       	mul	r24, r19
 76c:	a0 0d       	add	r26, r0
 76e:	61 1d       	adc	r22, r1
 770:	22 1f       	adc	r18, r18
 772:	74 9f       	mul	r23, r20
 774:	33 27       	eor	r19, r19
 776:	a0 0d       	add	r26, r0
 778:	61 1d       	adc	r22, r1
 77a:	23 1f       	adc	r18, r19
 77c:	84 9f       	mul	r24, r20
 77e:	60 0d       	add	r22, r0
 780:	21 1d       	adc	r18, r1
 782:	82 2f       	mov	r24, r18
 784:	76 2f       	mov	r23, r22
 786:	6a 2f       	mov	r22, r26
 788:	11 24       	eor	r1, r1
 78a:	9f 57       	subi	r25, 0x7F	; 127
 78c:	50 40       	sbci	r21, 0x00	; 0
 78e:	9a f0       	brmi	.+38     	; 0x7b6 <__mulsf3_pse+0x88>
 790:	f1 f0       	breq	.+60     	; 0x7ce <__mulsf3_pse+0xa0>
 792:	88 23       	and	r24, r24
 794:	4a f0       	brmi	.+18     	; 0x7a8 <__mulsf3_pse+0x7a>
 796:	ee 0f       	add	r30, r30
 798:	ff 1f       	adc	r31, r31
 79a:	bb 1f       	adc	r27, r27
 79c:	66 1f       	adc	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	91 50       	subi	r25, 0x01	; 1
 7a4:	50 40       	sbci	r21, 0x00	; 0
 7a6:	a9 f7       	brne	.-22     	; 0x792 <__mulsf3_pse+0x64>
 7a8:	9e 3f       	cpi	r25, 0xFE	; 254
 7aa:	51 05       	cpc	r21, r1
 7ac:	80 f0       	brcs	.+32     	; 0x7ce <__mulsf3_pse+0xa0>
 7ae:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 7b2:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_szero>
 7b6:	5f 3f       	cpi	r21, 0xFF	; 255
 7b8:	e4 f3       	brlt	.-8      	; 0x7b2 <__mulsf3_pse+0x84>
 7ba:	98 3e       	cpi	r25, 0xE8	; 232
 7bc:	d4 f3       	brlt	.-12     	; 0x7b2 <__mulsf3_pse+0x84>
 7be:	86 95       	lsr	r24
 7c0:	77 95       	ror	r23
 7c2:	67 95       	ror	r22
 7c4:	b7 95       	ror	r27
 7c6:	f7 95       	ror	r31
 7c8:	e7 95       	ror	r30
 7ca:	9f 5f       	subi	r25, 0xFF	; 255
 7cc:	c1 f7       	brne	.-16     	; 0x7be <__mulsf3_pse+0x90>
 7ce:	fe 2b       	or	r31, r30
 7d0:	88 0f       	add	r24, r24
 7d2:	91 1d       	adc	r25, r1
 7d4:	96 95       	lsr	r25
 7d6:	87 95       	ror	r24
 7d8:	97 f9       	bld	r25, 7
 7da:	08 95       	ret

000007dc <__fp_inf>:
 7dc:	97 f9       	bld	r25, 7
 7de:	9f 67       	ori	r25, 0x7F	; 127
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <__fp_nan>:
 7e8:	9f ef       	ldi	r25, 0xFF	; 255
 7ea:	80 ec       	ldi	r24, 0xC0	; 192
 7ec:	08 95       	ret

000007ee <__fp_pscA>:
 7ee:	00 24       	eor	r0, r0
 7f0:	0a 94       	dec	r0
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	09 06       	cpc	r0, r25
 7fa:	08 95       	ret

000007fc <__fp_pscB>:
 7fc:	00 24       	eor	r0, r0
 7fe:	0a 94       	dec	r0
 800:	12 16       	cp	r1, r18
 802:	13 06       	cpc	r1, r19
 804:	14 06       	cpc	r1, r20
 806:	05 06       	cpc	r0, r21
 808:	08 95       	ret

0000080a <__fp_round>:
 80a:	09 2e       	mov	r0, r25
 80c:	03 94       	inc	r0
 80e:	00 0c       	add	r0, r0
 810:	11 f4       	brne	.+4      	; 0x816 <__fp_round+0xc>
 812:	88 23       	and	r24, r24
 814:	52 f0       	brmi	.+20     	; 0x82a <__fp_round+0x20>
 816:	bb 0f       	add	r27, r27
 818:	40 f4       	brcc	.+16     	; 0x82a <__fp_round+0x20>
 81a:	bf 2b       	or	r27, r31
 81c:	11 f4       	brne	.+4      	; 0x822 <__fp_round+0x18>
 81e:	60 ff       	sbrs	r22, 0
 820:	04 c0       	rjmp	.+8      	; 0x82a <__fp_round+0x20>
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <_exit>:
 82c:	f8 94       	cli

0000082e <__stop_program>:
 82e:	ff cf       	rjmp	.-2      	; 0x82e <__stop_program>
