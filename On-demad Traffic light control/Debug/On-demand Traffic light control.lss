
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000970  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001341  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c85  00000000  00000000  0000280d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062d  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069c  00000000  00000000  00003c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004331  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
  74:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_START>:

void APP_START(void)
{
	
	/* external interrupt initialization INT0 */
	set_interrupet_init();
  7c:	0e 94 bd 02 	call	0x57a	; 0x57a <set_interrupet_init>
	
	/* Initialize Interrupt Button */
	Button_init(PORT_C, 0);
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	0e 94 57 01 	call	0x2ae	; 0x2ae <Button_init>
	
	/* Initialize Cars' Traffic Light LEDs */
	LED_init(PORT_A, Red); //Red
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_init>
	LED_init(PORT_A, Yellow); //Yellow
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_init>
	LED_init(PORT_A, Green); //Green
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_init>
	
	/* Initialize Peoples' Traffic Light LEDs */
	LED_init(PORT_B, Red); //Red
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_init>
	LED_init(PORT_B, Yellow); //Yellow
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_init>
	LED_init(PORT_B, Green); //Green
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_init>
	while (1)
	{
		
		/* cars green on for 5 seconds */
		
		LED_on(PORT_A, Green); //Green On
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		Green_State = HIGH;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		Delay_ms(5000);
  c6:	88 e8       	ldi	r24, 0x88	; 136
  c8:	93 e1       	ldi	r25, 0x13	; 19
  ca:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
		LED_off(PORT_A, Green); //Green Off
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
		Green_State = LOW;
  d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		/* cars Yellow on for 5 seconds */
		
		for(int i = 0; i < 10; i++)
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	0c c0       	rjmp	.+24     	; 0xf8 <APP_START+0x7c>
		{
			Yellow_State = HIGH;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Yellow_State>
			LED_Blink(PORT_A, Yellow);    // Blink Yellow LED
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_Blink>
			Delay_ms(500);
  ee:	84 ef       	ldi	r24, 0xF4	; 244
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
		LED_off(PORT_A, Green); //Green Off
		Green_State = LOW;
		
		/* cars Yellow on for 5 seconds */
		
		for(int i = 0; i < 10; i++)
  f6:	21 96       	adiw	r28, 0x01	; 1
  f8:	ca 30       	cpi	r28, 0x0A	; 10
  fa:	d1 05       	cpc	r29, r1
  fc:	8c f3       	brlt	.-30     	; 0xe0 <APP_START+0x64>
			Yellow_State = HIGH;
			LED_Blink(PORT_A, Yellow);    // Blink Yellow LED
			Delay_ms(500);
		}
		
		Yellow_State = LOW;
  fe:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Yellow_State>
		
		/* cars Red on for 5 seconds */
		
		LED_on(PORT_A, Red); //Red On
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		Red_State = HIGH;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Red_State>
		Delay_ms(5000);
 110:	88 e8       	ldi	r24, 0x88	; 136
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
		
		LED_off(PORT_A, Red); //Red On
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
	    Red_State = LOW;
 120:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Red_State>
		
		/* cars Yellow on for 5 seconds */
		
		for(int i = 0; i < 10; i++)
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	0c c0       	rjmp	.+24     	; 0x142 <APP_START+0xc6>
		{
			Yellow_State = HIGH;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Yellow_State>
			
			LED_Blink(PORT_A, Yellow);	 // Blink Yellow LED
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_Blink>
			Delay_ms(500);
 138:	84 ef       	ldi	r24, 0xF4	; 244
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
		LED_off(PORT_A, Red); //Red On
	    Red_State = LOW;
		
		/* cars Yellow on for 5 seconds */
		
		for(int i = 0; i < 10; i++)
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	ca 30       	cpi	r28, 0x0A	; 10
 144:	d1 05       	cpc	r29, r1
 146:	8c f3       	brlt	.-30     	; 0x12a <APP_START+0xae>
			
			LED_Blink(PORT_A, Yellow);	 // Blink Yellow LED
			Delay_ms(500);
		}
		
		   Yellow_State = LOW;
 148:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Yellow_State>
	}
 14c:	b5 cf       	rjmp	.-150    	; 0xb8 <APP_START+0x3c>

0000014e <Set_Cars_TrafficOff>:


void Set_Cars_TrafficOff(void)
{
	/*SET CARS' Traffic Off*/
	LED_off(PORT_A, Red); //Red Off
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
	LED_off(PORT_A, Yellow); //Yellow Off
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
	LED_off(PORT_A, Green); //Green Off
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
 166:	08 95       	ret

00000168 <Set_Pedestrians_TrafficOff>:
}

void Set_Pedestrians_TrafficOff(void)
{
	/*SET CARS' Traffic Off*/
	LED_off(PORT_B, Red); //Red Off
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
	LED_off(PORT_B, Yellow); //Yellow Off
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
	LED_off(PORT_B, Green); //Green Off
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
 180:	08 95       	ret

00000182 <pedestrain_mode>:

 void pedestrain_mode(void)
{
	
	/*SET CARS' & Pedestrian Traffic Off*/
	Set_Cars_TrafficOff();
 182:	0e 94 a7 00 	call	0x14e	; 0x14e <Set_Cars_TrafficOff>
	Set_Pedestrians_TrafficOff();
 186:	0e 94 b4 00 	call	0x168	; 0x168 <Set_Pedestrians_TrafficOff>

	if(Red_State == HIGH) // If Red LED Is On
 18a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Red_State>
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	81 f5       	brne	.+96     	; 0x1f2 <pedestrain_mode+0x70>
	{
		/*cars red on and pedestrian green on for 5 seconds*/
		
		LED_on(PORT_B, Green); //pedestrian Green On
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		LED_on(PORT_A, Red); //Cars' Red On
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		
		/*Delay for 5 seconds*/
		Delay_ms(5000);
 1a0:	88 e8       	ldi	r24, 0x88	; 136
 1a2:	93 e1       	ldi	r25, 0x13	; 19
 1a4:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
		
		/*cars red off and Both Cars' & pedestrian Yellow is Blinking for 5 seconds*/
		
		LED_off(PORT_A, Red); //Cars' Red Off
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
		
		for(int i = 0; i < 10; i++)
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <pedestrain_mode+0x4e>
		{
			LED_Blink(PORT_B, Yellow);	 // Blink pedestrian Yellow LED
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_Blink>
			LED_Blink(PORT_A, Yellow);	 // Blink Cars' Blink Yellow LED
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_Blink>
			Delay_ms(500);
 1c6:	84 ef       	ldi	r24, 0xF4	; 244
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
		
		/*cars red off and Both Cars' & pedestrian Yellow is Blinking for 5 seconds*/
		
		LED_off(PORT_A, Red); //Cars' Red Off
		
		for(int i = 0; i < 10; i++)
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	ca 30       	cpi	r28, 0x0A	; 10
 1d2:	d1 05       	cpc	r29, r1
 1d4:	84 f3       	brlt	.-32     	; 0x1b6 <pedestrain_mode+0x34>
			LED_Blink(PORT_B, Yellow);	 // Blink pedestrian Yellow LED
			LED_Blink(PORT_A, Yellow);	 // Blink Cars' Blink Yellow LED
			Delay_ms(500);
		}
		
		LED_off(PORT_B, Green); //pedestrian Green Off
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
		
		LED_on(PORT_B, Red); //pedestrian Red On
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		LED_on(PORT_A, Green); //Cars' Green On
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		
		/*Go Back To Normal Mode*/
		APP_START();
 1ee:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_START>
	}
	else if(Green_State == HIGH || Yellow_State == HIGH )
 1f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	29 f0       	breq	.+10     	; 0x204 <pedestrain_mode+0x82>
 1fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Yellow_State>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	09 f0       	breq	.+2      	; 0x204 <pedestrain_mode+0x82>
 202:	4c c0       	rjmp	.+152    	; 0x29c <pedestrain_mode+0x11a>
	{
		/*pedestrian red on and Both cars & pedestrian Yellow is Blinking for 5 seconds*/
		
		LED_on(PORT_B, Red); //pedestrian Red LED  on
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		
		for(int i = 0; i < 10; i++)
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	d0 e0       	ldi	r29, 0x00	; 0
 210:	0d c0       	rjmp	.+26     	; 0x22c <pedestrain_mode+0xaa>
		{
			LED_Blink(PORT_B, Yellow);	 // Blink pedestrian Yellow LED
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_Blink>
			LED_Blink(PORT_A, Yellow);	 // Blink Cars' Blink Yellow LED
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_Blink>
			Delay_ms(500);
 222:	84 ef       	ldi	r24, 0xF4	; 244
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
	{
		/*pedestrian red on and Both cars & pedestrian Yellow is Blinking for 5 seconds*/
		
		LED_on(PORT_B, Red); //pedestrian Red LED  on
		
		for(int i = 0; i < 10; i++)
 22a:	21 96       	adiw	r28, 0x01	; 1
 22c:	ca 30       	cpi	r28, 0x0A	; 10
 22e:	d1 05       	cpc	r29, r1
 230:	84 f3       	brlt	.-32     	; 0x212 <pedestrain_mode+0x90>
			LED_Blink(PORT_B, Yellow);	 // Blink pedestrian Yellow LED
			LED_Blink(PORT_A, Yellow);	 // Blink Cars' Blink Yellow LED
			Delay_ms(500);
		}
		
		LED_off(PORT_B, Red); //pedestrian Red LED  off
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
		
		LED_on(PORT_A, Red); //Cars' Red On
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		LED_on(PORT_B, Green); //pedestrian' Green On
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		Delay_ms(5000);
 24a:	88 e8       	ldi	r24, 0x88	; 136
 24c:	93 e1       	ldi	r25, 0x13	; 19
 24e:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
		
		/*cars red off and Both Cars' & pedestrian Yellow is Blinking for 5 seconds*/
		
		LED_off(PORT_A, Red); //Cars' Red Off
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
		
		for(int i = 0; i < 10; i++)
 25a:	c0 e0       	ldi	r28, 0x00	; 0
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	0d c0       	rjmp	.+26     	; 0x27a <pedestrain_mode+0xf8>
		{
			LED_Blink(PORT_B, Yellow);	 // Blink pedestrian Yellow LED
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_Blink>
			LED_Blink(PORT_A, Yellow);	 // Blink Cars' Blink Yellow LED
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_Blink>
			Delay_ms(500);
 270:	84 ef       	ldi	r24, 0xF4	; 244
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 ca 02 	call	0x594	; 0x594 <Delay_ms>
		
		/*cars red off and Both Cars' & pedestrian Yellow is Blinking for 5 seconds*/
		
		LED_off(PORT_A, Red); //Cars' Red Off
		
		for(int i = 0; i < 10; i++)
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	ca 30       	cpi	r28, 0x0A	; 10
 27c:	d1 05       	cpc	r29, r1
 27e:	84 f3       	brlt	.-32     	; 0x260 <pedestrain_mode+0xde>
			LED_Blink(PORT_B, Yellow);	 // Blink pedestrian Yellow LED
			LED_Blink(PORT_A, Yellow);	 // Blink Cars' Blink Yellow LED
			Delay_ms(500);
		}
		
		LED_off(PORT_B, Green); //pedestrian Green Off
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_off>
		
		LED_on(PORT_B, Red); //pedestrian Red On
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		LED_on(PORT_A, Green); //Cars' Green On
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LED_on>
		
		/*Go Back To Normal Mode*/
		APP_START();
 298:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_START>
	}
	 else
	 {
		 /*Go Back To Normal Mode*/
		 APP_START();
 29c:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_START>

000002a0 <__vector_1>:
	 }
}

ISR(EXT_INT_0)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
	
	 pedestrain_mode();
 2aa:	0e 94 c1 00 	call	0x182	; 0x182 <pedestrain_mode>

000002ae <Button_init>:

EN_BUTTONError_t Button_init(uint8_t ledport, uint8_t ledpin)
{
	EN_BUTTONError_t BUTTON_error = BUTTON_OK;
	
	DIO_init(ledport, ledpin, INPUT);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_init>
	{
		BUTTON_error = BUTTON_OK;
	}

	return BUTTON_error;
}
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret

000002b8 <LED_init>:

EN_LEDError_t LED_init(uint8_t ledport, uint8_t ledpin)
{
	EN_LEDError_t LED_error = LED_OK;
	
	DIO_init(ledport, ledpin, OUTPUT);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_init>
	{
		LED_error = LED_OK;
	}

	return LED_error;
}
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret

000002c2 <LED_on>:

EN_LEDError_t LED_on(uint8_t ledport, uint8_t ledpin)
{
	EN_LEDError_t LED_error = LED_OK;
	
	DIO_write(ledport, ledpin, HIGH);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_write>
	{
		LED_error = LED_OK;
	}

	return LED_error;
}
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret

000002cc <LED_off>:

EN_LEDError_t LED_off(uint8_t ledport, uint8_t ledpin)
{
	EN_LEDError_t LED_error = LED_OK;
	
	DIO_write(ledport, ledpin, LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_write>
	{
		LED_error = LED_OK;
	}

	return LED_error;
}
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret

000002d6 <LED_Blink>:

EN_LEDError_t LED_Blink(uint8_t ledport, uint8_t ledpin)
{
		EN_LEDError_t LED_error = LED_OK;
	
		DIO_toggle(ledport, ledpin);
 2d6:	0e 94 88 02 	call	0x510	; 0x510 <DIO_toggle>
		{
			LED_error = LED_OK;
		}

		return LED_error;
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret

000002de <main>:


int main(void)
{
	
	APP_START();
 2de:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_START>
	
}
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	08 95       	ret

000002e8 <DIO_init>:
//DIO Functions
EN_DIOError_t DIO_init(uint8_t PortX, uint8_t PinNum, uint8_t direction)
{
	EN_DIOError_t DIO_error = DIO_OK;
	
	switch(PortX)
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	31 f1       	breq	.+76     	; 0x338 <DIO_init+0x50>
 2ec:	38 f0       	brcs	.+14     	; 0x2fc <DIO_init+0x14>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <DIO_init+0xc>
 2f2:	40 c0       	rjmp	.+128    	; 0x374 <DIO_init+0x8c>
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	09 f4       	brne	.+2      	; 0x2fa <DIO_init+0x12>
 2f8:	5a c0       	rjmp	.+180    	; 0x3ae <DIO_init+0xc6>
 2fa:	76 c0       	rjmp	.+236    	; 0x3e8 <DIO_init+0x100>
	{
		//case 1
		case PORT_A:
			if (direction == INPUT)
 2fc:	41 11       	cpse	r20, r1
 2fe:	0d c0       	rjmp	.+26     	; 0x31a <DIO_init+0x32>
			{
				CLEAR_BIT(PORTA, PinNum); // SET Pin To INPUT State
 300:	2b b3       	in	r18, 0x1b	; 27
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_init+0x24>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_init+0x20>
 310:	80 95       	com	r24
 312:	82 23       	and	r24, r18
 314:	8b bb       	out	0x1b, r24	; 27
			}
			
			break;
	}
	
	return DIO_error;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
		case PORT_A:
			if (direction == INPUT)
			{
				CLEAR_BIT(PORTA, PinNum); // SET Pin To INPUT State
			}
			else if (direction == OUTPUT)
 31a:	41 30       	cpi	r20, 0x01	; 1
 31c:	09 f0       	breq	.+2      	; 0x320 <DIO_init+0x38>
 31e:	66 c0       	rjmp	.+204    	; 0x3ec <DIO_init+0x104>
			{
				SET_BIT(PORTA, PinNum);  //SET Pin To OUTPUT State
 320:	2b b3       	in	r18, 0x1b	; 27
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_init+0x44>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_init+0x40>
 330:	82 2b       	or	r24, r18
 332:	8b bb       	out	0x1b, r24	; 27
			}
			
			break;
	}
	
	return DIO_error;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret
			}
			break;
		
		//case 2 
		case PORT_B:
			if (direction == INPUT)
 338:	41 11       	cpse	r20, r1
 33a:	0d c0       	rjmp	.+26     	; 0x356 <DIO_init+0x6e>
			{
				CLEAR_BIT(PORTB, PinNum); // SET Pin To INPUT State
 33c:	28 b3       	in	r18, 0x18	; 24
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_init+0x60>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_init+0x5c>
 34c:	80 95       	com	r24
 34e:	82 23       	and	r24, r18
 350:	88 bb       	out	0x18, r24	; 24
			}
			
			break;
	}
	
	return DIO_error;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
		case PORT_B:
			if (direction == INPUT)
			{
				CLEAR_BIT(PORTB, PinNum); // SET Pin To INPUT State
			}
			else if (direction == OUTPUT)
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	09 f0       	breq	.+2      	; 0x35c <DIO_init+0x74>
 35a:	4a c0       	rjmp	.+148    	; 0x3f0 <DIO_init+0x108>
			{
				SET_BIT(PORTB, PinNum);  //SET Pin To OUTPUT State
 35c:	28 b3       	in	r18, 0x18	; 24
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_init+0x80>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_init+0x7c>
 36c:	82 2b       	or	r24, r18
 36e:	88 bb       	out	0x18, r24	; 24
			}
			
			break;
	}
	
	return DIO_error;
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret
			
			break;
		
		//case 3
		case PORT_C:
			if (direction == INPUT)
 374:	41 11       	cpse	r20, r1
 376:	0d c0       	rjmp	.+26     	; 0x392 <DIO_init+0xaa>
			{
				CLEAR_BIT(PORTC, PinNum); // SET Pin To INPUT State
 378:	25 b3       	in	r18, 0x15	; 21
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_init+0x9c>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_init+0x98>
 388:	80 95       	com	r24
 38a:	82 23       	and	r24, r18
 38c:	85 bb       	out	0x15, r24	; 21
			}
			
			break;
	}
	
	return DIO_error;
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret
		case PORT_C:
			if (direction == INPUT)
			{
				CLEAR_BIT(PORTC, PinNum); // SET Pin To INPUT State
			}
			else if (direction == OUTPUT)
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	79 f5       	brne	.+94     	; 0x3f4 <DIO_init+0x10c>
			{
				SET_BIT(PORTC, PinNum);  //SET Pin To OUTPUT State
 396:	25 b3       	in	r18, 0x15	; 21
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_init+0xba>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_init+0xb6>
 3a6:	82 2b       	or	r24, r18
 3a8:	85 bb       	out	0x15, r24	; 21
			}
			
			break;
	}
	
	return DIO_error;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
			
			break;
		
		//case 4
		case PORT_D:
			if (direction == INPUT)
 3ae:	41 11       	cpse	r20, r1
 3b0:	0d c0       	rjmp	.+26     	; 0x3cc <DIO_init+0xe4>
			{
				CLEAR_BIT(PORTD, PinNum); // SET Pin To INPUT State
 3b2:	22 b3       	in	r18, 0x12	; 18
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_init+0xd6>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_init+0xd2>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	82 bb       	out	0x12, r24	; 18
			}
			
			break;
	}
	
	return DIO_error;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	08 95       	ret
		case PORT_D:
			if (direction == INPUT)
			{
				CLEAR_BIT(PORTD, PinNum); // SET Pin To INPUT State
			}
			else if (direction == OUTPUT)
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	a1 f4       	brne	.+40     	; 0x3f8 <DIO_init+0x110>
			{
				SET_BIT(PORTD, PinNum);  //SET Pin To OUTPUT State
 3d0:	22 b3       	in	r18, 0x12	; 18
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_init+0xf4>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_init+0xf0>
 3e0:	82 2b       	or	r24, r18
 3e2:	82 bb       	out	0x12, r24	; 18
			}
			
			break;
	}
	
	return DIO_error;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
				SET_BIT(PORTA, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
			  // ERROR
			  return DIO_ERROR;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
				SET_BIT(PORTB, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				 return DIO_ERROR;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret
				SET_BIT(PORTC, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret
				SET_BIT(PORTD, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
			
			break;
	}
	
	return DIO_error;
}
 3fa:	08 95       	ret

000003fc <DIO_write>:

EN_DIOError_t DIO_write(uint8_t PortX, uint8_t PinNum, uint8_t Value)
{
	EN_DIOError_t DIO_error = DIO_OK;
	
	switch(PortX)
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	31 f1       	breq	.+76     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 400:	38 f0       	brcs	.+14     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	09 f4       	brne	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	40 c0       	rjmp	.+128    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	09 f4       	brne	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40c:	5a c0       	rjmp	.+180    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 40e:	76 c0       	rjmp	.+236    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
	{
		//case 1
		case PORT_A:
			if (Value == LOW)
 410:	41 11       	cpse	r20, r1
 412:	0d c0       	rjmp	.+26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			{
				CLEAR_BIT(DDRA, PinNum); // SET Pin To INPUT State
 414:	2a b3       	in	r18, 0x1a	; 26
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	80 95       	com	r24
 426:	82 23       	and	r24, r18
 428:	8a bb       	out	0x1a, r24	; 26
			}
			
			break;
	}
	
	return DIO_error;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
		case PORT_A:
			if (Value == LOW)
			{
				CLEAR_BIT(DDRA, PinNum); // SET Pin To INPUT State
			}
			else if (Value == HIGH)
 42e:	41 30       	cpi	r20, 0x01	; 1
 430:	09 f0       	breq	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 432:	66 c0       	rjmp	.+204    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
			{
				SET_BIT(DDRA, PinNum);  //SET Pin To OUTPUT State
 434:	2a b3       	in	r18, 0x1a	; 26
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	82 2b       	or	r24, r18
 446:	8a bb       	out	0x1a, r24	; 26
			}
			
			break;
	}
	
	return DIO_error;
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	08 95       	ret
			
			break;
		
		//case 2
		case PORT_B:
			if (Value == LOW)
 44c:	41 11       	cpse	r20, r1
 44e:	0d c0       	rjmp	.+26     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			{
				CLEAR_BIT(DDRB, PinNum); // SET Pin To INPUT State
 450:	27 b3       	in	r18, 0x17	; 23
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	80 95       	com	r24
 462:	82 23       	and	r24, r18
 464:	87 bb       	out	0x17, r24	; 23
			}
			
			break;
	}
	
	return DIO_error;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	08 95       	ret
		case PORT_B:
			if (Value == LOW)
			{
				CLEAR_BIT(DDRB, PinNum); // SET Pin To INPUT State
			}
			else if (Value == HIGH)
 46a:	41 30       	cpi	r20, 0x01	; 1
 46c:	09 f0       	breq	.+2      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46e:	4a c0       	rjmp	.+148    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
			{
				SET_BIT(DDRB, PinNum);  //SET Pin To OUTPUT State
 470:	27 b3       	in	r18, 0x17	; 23
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	82 2b       	or	r24, r18
 482:	87 bb       	out	0x17, r24	; 23
			}
			
			break;
	}
	
	return DIO_error;
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	08 95       	ret
			
			break;
		
		//case 3
			case PORT_C:
			if (Value == LOW)
 488:	41 11       	cpse	r20, r1
 48a:	0d c0       	rjmp	.+26     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			{
				CLEAR_BIT(DDRC, PinNum); // SET Pin To INPUT State
 48c:	24 b3       	in	r18, 0x14	; 20
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	84 bb       	out	0x14, r24	; 20
			}
			
			break;
	}
	
	return DIO_error;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	08 95       	ret
			case PORT_C:
			if (Value == LOW)
			{
				CLEAR_BIT(DDRC, PinNum); // SET Pin To INPUT State
			}
			else if (Value == HIGH)
 4a6:	41 30       	cpi	r20, 0x01	; 1
 4a8:	79 f5       	brne	.+94     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
			{
				SET_BIT(DDRC, PinNum);  //SET Pin To OUTPUT State
 4aa:	24 b3       	in	r18, 0x14	; 20
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ba:	82 2b       	or	r24, r18
 4bc:	84 bb       	out	0x14, r24	; 20
			}
			
			break;
	}
	
	return DIO_error;
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
			
			break;
		
		//case 4
			case PORT_D:
			if (Value == LOW)
 4c2:	41 11       	cpse	r20, r1
 4c4:	0d c0       	rjmp	.+26     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
			{
				CLEAR_BIT(DDRD, PinNum); // SET Pin To INPUT State
 4c6:	21 b3       	in	r18, 0x11	; 17
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d6:	80 95       	com	r24
 4d8:	82 23       	and	r24, r18
 4da:	81 bb       	out	0x11, r24	; 17
			}
			
			break;
	}
	
	return DIO_error;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
			case PORT_D:
			if (Value == LOW)
			{
				CLEAR_BIT(DDRD, PinNum); // SET Pin To INPUT State
			}
			else if (Value == HIGH)
 4e0:	41 30       	cpi	r20, 0x01	; 1
 4e2:	a1 f4       	brne	.+40     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
			{
				SET_BIT(DDRD, PinNum);  //SET Pin To OUTPUT State
 4e4:	21 b3       	in	r18, 0x11	; 17
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4f4:	82 2b       	or	r24, r18
 4f6:	81 bb       	out	0x11, r24	; 17
			}
			
			break;
	}
	
	return DIO_error;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	08 95       	ret
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	08 95       	ret
				SET_BIT(DDRA, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	08 95       	ret
				SET_BIT(DDRB, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	08 95       	ret
				SET_BIT(DDRC, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	08 95       	ret
				SET_BIT(DDRD, PinNum);  //SET Pin To OUTPUT State
			}
			else
			{
				// ERROR
				return DIO_ERROR;
 50c:	81 e0       	ldi	r24, 0x01	; 1
			
			break;
	}
	
	return DIO_error;
}
 50e:	08 95       	ret

00000510 <DIO_toggle>:

EN_DIOError_t DIO_toggle(uint8_t PortX, uint8_t PinNum)
{
	EN_DIOError_t DIO_error = DIO_OK;
	
	switch(PortX)
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	89 f0       	breq	.+34     	; 0x536 <DIO_toggle+0x26>
 514:	28 f0       	brcs	.+10     	; 0x520 <DIO_toggle+0x10>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	c9 f0       	breq	.+50     	; 0x54c <DIO_toggle+0x3c>
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	11 f1       	breq	.+68     	; 0x562 <DIO_toggle+0x52>
 51e:	2b c0       	rjmp	.+86     	; 0x576 <DIO_toggle+0x66>
	{
		case PORT_A:
		FLIP_BIT(DDRA, PinNum);
 520:	2a b3       	in	r18, 0x1a	; 26
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_toggle+0x1c>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_toggle+0x18>
 530:	82 27       	eor	r24, r18
 532:	8a bb       	out	0x1a, r24	; 26
 534:	20 c0       	rjmp	.+64     	; 0x576 <DIO_toggle+0x66>
		}
		
		break;
		
		case PORT_B:
		FLIP_BIT(DDRB, PinNum);
 536:	27 b3       	in	r18, 0x17	; 23
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_toggle+0x32>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_toggle+0x2e>
 546:	82 27       	eor	r24, r18
 548:	87 bb       	out	0x17, r24	; 23
 54a:	15 c0       	rjmp	.+42     	; 0x576 <DIO_toggle+0x66>
		}
		
		break;
		
		case PORT_C:
		FLIP_BIT(DDRC, PinNum);
 54c:	24 b3       	in	r18, 0x14	; 20
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_toggle+0x48>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_toggle+0x44>
 55c:	82 27       	eor	r24, r18
 55e:	84 bb       	out	0x14, r24	; 20
 560:	0a c0       	rjmp	.+20     	; 0x576 <DIO_toggle+0x66>
		}
		
		break;
		
		case PORT_D:
		FLIP_BIT(DDRD, PinNum);
 562:	21 b3       	in	r18, 0x11	; 17
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_toggle+0x5e>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_toggle+0x5a>
 572:	82 27       	eor	r24, r18
 574:	81 bb       	out	0x11, r24	; 17
		
		break;
	}
	
	return DIO_error;
}
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	08 95       	ret

0000057a <set_interrupet_init>:
EN_INTERRUPTSError_t set_interrupet_init(void)
{
	EN_INTERRUPTSError_t INTERRUPTS_error = INTERRUPTS_OK;
	/*set interrupt using assembly code*/
	
	__asm__ __volatile__ ("sei" ::: "memory");
 57a:	78 94       	sei
	
	/*choosing the external interrupt sense - sense on rising edge*/
	
	MCUCR |=  (1<<ISC00) | (1<<ISC01);
 57c:	85 b7       	in	r24, 0x35	; 53
 57e:	83 60       	ori	r24, 0x03	; 3
 580:	85 bf       	out	0x35, r24	; 53
	
	/*enabling the external interrupt 0 - INT0*/
	GICR |= (1<<INT0);
 582:	8b b7       	in	r24, 0x3b	; 59
 584:	80 64       	ori	r24, 0x40	; 64
 586:	8b bf       	out	0x3b, r24	; 59
	{
		INTERRUPTS_error = INTERRUPTS_OK;
	}
	
	return INTERRUPTS_error;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret

0000058c <Delay_Rgisters_init>:
// TIMER0 initialization
EN_TIMERSError_t Delay_Rgisters_init(void)
{
	EN_TIMERSError_t TIMER_Error = TIMERS_OK;
	
	TCCR0 = 0x00; // normal mode
 58c:	13 be       	out	0x33, r1	; 51
	
	TCNT0 = 0x00;
 58e:	12 be       	out	0x32, r1	; 50
	{
		TIMER_Error = TIMERS_OK;
	}

	return TIMER_Error;
}
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret

00000594 <Delay_ms>:

EN_TIMERSError_t Delay_ms(uint32_t delay)
{
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
	EN_TIMERSError_t TIMER_Error = TIMERS_OK;
	
	Delay_Rgisters_init();
 59a:	0e 94 c6 02 	call	0x58c	; 0x58c <Delay_Rgisters_init>
	
	uint32_t Num_Of_Overflowes = (uint32_t)ceil( ((delay * pow(10,3)) / (pow(2, 8) * FCPU)) ); // calculate number of Overflows based on desired Delay (mile second)
 59e:	be 01       	movw	r22, r28
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 40 03 	call	0x680	; 0x680 <__floatunsisf>
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	4a e7       	ldi	r20, 0x7A	; 122
 5ae:	54 e4       	ldi	r21, 0x44	; 68
 5b0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__mulsf3>
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	40 e8       	ldi	r20, 0x80	; 128
 5ba:	5b e3       	ldi	r21, 0x3B	; 59
 5bc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__mulsf3>
 5c0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ceil>
 5c4:	0e 94 11 03 	call	0x622	; 0x622 <__fixunssfsi>
	
	int Overflowes_Counter = 0; // initialize overflow counter
	
	TCCR0 |= (1<<0); // Timer start
 5c8:	83 b7       	in	r24, 0x33	; 51
 5ca:	81 60       	ori	r24, 0x01	; 1
 5cc:	83 bf       	out	0x33, r24	; 51
	
	Delay_Rgisters_init();
	
	uint32_t Num_Of_Overflowes = (uint32_t)ceil( ((delay * pow(10,3)) / (pow(2, 8) * FCPU)) ); // calculate number of Overflows based on desired Delay (mile second)
	
	int Overflowes_Counter = 0; // initialize overflow counter
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
	
	TCCR0 |= (1<<0); // Timer start
	
	while(Overflowes_Counter < Num_Of_Overflowes)
 5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <Delay_ms+0x50>
	{
		while((TIFR & (1<<0)) == 0); //wait until overflow Flag is High
 5d4:	08 b6       	in	r0, 0x38	; 56
 5d6:	00 fe       	sbrs	r0, 0
 5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <Delay_ms+0x40>
		
		TIFR |= (1<<0); //clear Overflow Flag
 5da:	88 b7       	in	r24, 0x38	; 56
 5dc:	81 60       	ori	r24, 0x01	; 1
 5de:	88 bf       	out	0x38, r24	; 56
		
		Overflowes_Counter++;
 5e0:	2f 5f       	subi	r18, 0xFF	; 255
 5e2:	3f 4f       	sbci	r19, 0xFF	; 255
	
	int Overflowes_Counter = 0; // initialize overflow counter
	
	TCCR0 |= (1<<0); // Timer start
	
	while(Overflowes_Counter < Num_Of_Overflowes)
 5e4:	26 17       	cp	r18, r22
 5e6:	37 07       	cpc	r19, r23
 5e8:	a8 f3       	brcs	.-22     	; 0x5d4 <Delay_ms+0x40>
		Overflowes_Counter++;
	}
	
	Overflowes_Counter = 0;
	
	TCCR0 =0x00; //Timer stop
 5ea:	13 be       	out	0x33, r1	; 51
	{
		TIMER_Error = TIMERS_OK;
	}

	return TIMER_Error;
}
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <ceil>:
 5f4:	0e 94 c8 03 	call	0x790	; 0x790 <__fp_trunc>
 5f8:	90 f0       	brcs	.+36     	; 0x61e <ceil+0x2a>
 5fa:	9f 37       	cpi	r25, 0x7F	; 127
 5fc:	48 f4       	brcc	.+18     	; 0x610 <ceil+0x1c>
 5fe:	91 11       	cpse	r25, r1
 600:	16 f4       	brtc	.+4      	; 0x606 <ceil+0x12>
 602:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_szero>
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	80 e8       	ldi	r24, 0x80	; 128
 60c:	9f e3       	ldi	r25, 0x3F	; 63
 60e:	08 95       	ret
 610:	26 f0       	brts	.+8      	; 0x61a <ceil+0x26>
 612:	1b 16       	cp	r1, r27
 614:	61 1d       	adc	r22, r1
 616:	71 1d       	adc	r23, r1
 618:	81 1d       	adc	r24, r1
 61a:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_mintl>
 61e:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_mpack>

00000622 <__fixunssfsi>:
 622:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_splitA>
 626:	88 f0       	brcs	.+34     	; 0x64a <__fixunssfsi+0x28>
 628:	9f 57       	subi	r25, 0x7F	; 127
 62a:	98 f0       	brcs	.+38     	; 0x652 <__fixunssfsi+0x30>
 62c:	b9 2f       	mov	r27, r25
 62e:	99 27       	eor	r25, r25
 630:	b7 51       	subi	r27, 0x17	; 23
 632:	b0 f0       	brcs	.+44     	; 0x660 <__fixunssfsi+0x3e>
 634:	e1 f0       	breq	.+56     	; 0x66e <__fixunssfsi+0x4c>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	1a f0       	brmi	.+6      	; 0x646 <__fixunssfsi+0x24>
 640:	ba 95       	dec	r27
 642:	c9 f7       	brne	.-14     	; 0x636 <__fixunssfsi+0x14>
 644:	14 c0       	rjmp	.+40     	; 0x66e <__fixunssfsi+0x4c>
 646:	b1 30       	cpi	r27, 0x01	; 1
 648:	91 f0       	breq	.+36     	; 0x66e <__fixunssfsi+0x4c>
 64a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__fp_zero>
 64e:	b1 e0       	ldi	r27, 0x01	; 1
 650:	08 95       	ret
 652:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__fp_zero>
 656:	67 2f       	mov	r22, r23
 658:	78 2f       	mov	r23, r24
 65a:	88 27       	eor	r24, r24
 65c:	b8 5f       	subi	r27, 0xF8	; 248
 65e:	39 f0       	breq	.+14     	; 0x66e <__fixunssfsi+0x4c>
 660:	b9 3f       	cpi	r27, 0xF9	; 249
 662:	cc f3       	brlt	.-14     	; 0x656 <__fixunssfsi+0x34>
 664:	86 95       	lsr	r24
 666:	77 95       	ror	r23
 668:	67 95       	ror	r22
 66a:	b3 95       	inc	r27
 66c:	d9 f7       	brne	.-10     	; 0x664 <__fixunssfsi+0x42>
 66e:	3e f4       	brtc	.+14     	; 0x67e <__fixunssfsi+0x5c>
 670:	90 95       	com	r25
 672:	80 95       	com	r24
 674:	70 95       	com	r23
 676:	61 95       	neg	r22
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	08 95       	ret

00000680 <__floatunsisf>:
 680:	e8 94       	clt
 682:	09 c0       	rjmp	.+18     	; 0x696 <__floatsisf+0x12>

00000684 <__floatsisf>:
 684:	97 fb       	bst	r25, 7
 686:	3e f4       	brtc	.+14     	; 0x696 <__floatsisf+0x12>
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	99 23       	and	r25, r25
 698:	a9 f0       	breq	.+42     	; 0x6c4 <__floatsisf+0x40>
 69a:	f9 2f       	mov	r31, r25
 69c:	96 e9       	ldi	r25, 0x96	; 150
 69e:	bb 27       	eor	r27, r27
 6a0:	93 95       	inc	r25
 6a2:	f6 95       	lsr	r31
 6a4:	87 95       	ror	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b7 95       	ror	r27
 6ac:	f1 11       	cpse	r31, r1
 6ae:	f8 cf       	rjmp	.-16     	; 0x6a0 <__floatsisf+0x1c>
 6b0:	fa f4       	brpl	.+62     	; 0x6f0 <__floatsisf+0x6c>
 6b2:	bb 0f       	add	r27, r27
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__floatsisf+0x36>
 6b6:	60 ff       	sbrs	r22, 0
 6b8:	1b c0       	rjmp	.+54     	; 0x6f0 <__floatsisf+0x6c>
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	16 c0       	rjmp	.+44     	; 0x6f0 <__floatsisf+0x6c>
 6c4:	88 23       	and	r24, r24
 6c6:	11 f0       	breq	.+4      	; 0x6cc <__floatsisf+0x48>
 6c8:	96 e9       	ldi	r25, 0x96	; 150
 6ca:	11 c0       	rjmp	.+34     	; 0x6ee <__floatsisf+0x6a>
 6cc:	77 23       	and	r23, r23
 6ce:	21 f0       	breq	.+8      	; 0x6d8 <__floatsisf+0x54>
 6d0:	9e e8       	ldi	r25, 0x8E	; 142
 6d2:	87 2f       	mov	r24, r23
 6d4:	76 2f       	mov	r23, r22
 6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <__floatsisf+0x5e>
 6d8:	66 23       	and	r22, r22
 6da:	71 f0       	breq	.+28     	; 0x6f8 <__floatsisf+0x74>
 6dc:	96 e8       	ldi	r25, 0x86	; 134
 6de:	86 2f       	mov	r24, r22
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	2a f0       	brmi	.+10     	; 0x6f0 <__floatsisf+0x6c>
 6e6:	9a 95       	dec	r25
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	da f7       	brpl	.-10     	; 0x6e6 <__floatsisf+0x62>
 6f0:	88 0f       	add	r24, r24
 6f2:	96 95       	lsr	r25
 6f4:	87 95       	ror	r24
 6f6:	97 f9       	bld	r25, 7
 6f8:	08 95       	ret

000006fa <__fp_mintl>:
 6fa:	88 23       	and	r24, r24
 6fc:	71 f4       	brne	.+28     	; 0x71a <__fp_mintl+0x20>
 6fe:	77 23       	and	r23, r23
 700:	21 f0       	breq	.+8      	; 0x70a <__fp_mintl+0x10>
 702:	98 50       	subi	r25, 0x08	; 8
 704:	87 2b       	or	r24, r23
 706:	76 2f       	mov	r23, r22
 708:	07 c0       	rjmp	.+14     	; 0x718 <__fp_mintl+0x1e>
 70a:	66 23       	and	r22, r22
 70c:	11 f4       	brne	.+4      	; 0x712 <__fp_mintl+0x18>
 70e:	99 27       	eor	r25, r25
 710:	0d c0       	rjmp	.+26     	; 0x72c <__fp_mintl+0x32>
 712:	90 51       	subi	r25, 0x10	; 16
 714:	86 2b       	or	r24, r22
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	2a f0       	brmi	.+10     	; 0x726 <__fp_mintl+0x2c>
 71c:	9a 95       	dec	r25
 71e:	66 0f       	add	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	da f7       	brpl	.-10     	; 0x71c <__fp_mintl+0x22>
 726:	88 0f       	add	r24, r24
 728:	96 95       	lsr	r25
 72a:	87 95       	ror	r24
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret

00000730 <__fp_mpack>:
 730:	9f 3f       	cpi	r25, 0xFF	; 255
 732:	31 f0       	breq	.+12     	; 0x740 <__fp_mpack_finite+0xc>

00000734 <__fp_mpack_finite>:
 734:	91 50       	subi	r25, 0x01	; 1
 736:	20 f4       	brcc	.+8      	; 0x740 <__fp_mpack_finite+0xc>
 738:	87 95       	ror	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	88 0f       	add	r24, r24
 742:	91 1d       	adc	r25, r1
 744:	96 95       	lsr	r25
 746:	87 95       	ror	r24
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__fp_split3>:
 74c:	57 fd       	sbrc	r21, 7
 74e:	90 58       	subi	r25, 0x80	; 128
 750:	44 0f       	add	r20, r20
 752:	55 1f       	adc	r21, r21
 754:	59 f0       	breq	.+22     	; 0x76c <__fp_splitA+0x10>
 756:	5f 3f       	cpi	r21, 0xFF	; 255
 758:	71 f0       	breq	.+28     	; 0x776 <__fp_splitA+0x1a>
 75a:	47 95       	ror	r20

0000075c <__fp_splitA>:
 75c:	88 0f       	add	r24, r24
 75e:	97 fb       	bst	r25, 7
 760:	99 1f       	adc	r25, r25
 762:	61 f0       	breq	.+24     	; 0x77c <__fp_splitA+0x20>
 764:	9f 3f       	cpi	r25, 0xFF	; 255
 766:	79 f0       	breq	.+30     	; 0x786 <__fp_splitA+0x2a>
 768:	87 95       	ror	r24
 76a:	08 95       	ret
 76c:	12 16       	cp	r1, r18
 76e:	13 06       	cpc	r1, r19
 770:	14 06       	cpc	r1, r20
 772:	55 1f       	adc	r21, r21
 774:	f2 cf       	rjmp	.-28     	; 0x75a <__fp_split3+0xe>
 776:	46 95       	lsr	r20
 778:	f1 df       	rcall	.-30     	; 0x75c <__fp_splitA>
 77a:	08 c0       	rjmp	.+16     	; 0x78c <__fp_splitA+0x30>
 77c:	16 16       	cp	r1, r22
 77e:	17 06       	cpc	r1, r23
 780:	18 06       	cpc	r1, r24
 782:	99 1f       	adc	r25, r25
 784:	f1 cf       	rjmp	.-30     	; 0x768 <__fp_splitA+0xc>
 786:	86 95       	lsr	r24
 788:	71 05       	cpc	r23, r1
 78a:	61 05       	cpc	r22, r1
 78c:	08 94       	sec
 78e:	08 95       	ret

00000790 <__fp_trunc>:
 790:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_splitA>
 794:	a0 f0       	brcs	.+40     	; 0x7be <__fp_trunc+0x2e>
 796:	be e7       	ldi	r27, 0x7E	; 126
 798:	b9 17       	cp	r27, r25
 79a:	88 f4       	brcc	.+34     	; 0x7be <__fp_trunc+0x2e>
 79c:	bb 27       	eor	r27, r27
 79e:	9f 38       	cpi	r25, 0x8F	; 143
 7a0:	60 f4       	brcc	.+24     	; 0x7ba <__fp_trunc+0x2a>
 7a2:	16 16       	cp	r1, r22
 7a4:	b1 1d       	adc	r27, r1
 7a6:	67 2f       	mov	r22, r23
 7a8:	78 2f       	mov	r23, r24
 7aa:	88 27       	eor	r24, r24
 7ac:	98 5f       	subi	r25, 0xF8	; 248
 7ae:	f7 cf       	rjmp	.-18     	; 0x79e <__fp_trunc+0xe>
 7b0:	86 95       	lsr	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b1 1d       	adc	r27, r1
 7b8:	93 95       	inc	r25
 7ba:	96 39       	cpi	r25, 0x96	; 150
 7bc:	c8 f3       	brcs	.-14     	; 0x7b0 <__fp_trunc+0x20>
 7be:	08 95       	ret

000007c0 <__fp_zero>:
 7c0:	e8 94       	clt

000007c2 <__fp_szero>:
 7c2:	bb 27       	eor	r27, r27
 7c4:	66 27       	eor	r22, r22
 7c6:	77 27       	eor	r23, r23
 7c8:	cb 01       	movw	r24, r22
 7ca:	97 f9       	bld	r25, 7
 7cc:	08 95       	ret

000007ce <__mulsf3>:
 7ce:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__mulsf3x>
 7d2:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__fp_round>
 7d6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fp_pscA>
 7da:	38 f0       	brcs	.+14     	; 0x7ea <__mulsf3+0x1c>
 7dc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_pscB>
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <__mulsf3+0x1c>
 7e2:	95 23       	and	r25, r21
 7e4:	11 f0       	breq	.+4      	; 0x7ea <__mulsf3+0x1c>
 7e6:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_inf>
 7ea:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_nan>
 7ee:	11 24       	eor	r1, r1
 7f0:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_szero>

000007f4 <__mulsf3x>:
 7f4:	0e 94 a6 03 	call	0x74c	; 0x74c <__fp_split3>
 7f8:	70 f3       	brcs	.-36     	; 0x7d6 <__mulsf3+0x8>

000007fa <__mulsf3_pse>:
 7fa:	95 9f       	mul	r25, r21
 7fc:	c1 f3       	breq	.-16     	; 0x7ee <__mulsf3+0x20>
 7fe:	95 0f       	add	r25, r21
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	55 1f       	adc	r21, r21
 804:	62 9f       	mul	r22, r18
 806:	f0 01       	movw	r30, r0
 808:	72 9f       	mul	r23, r18
 80a:	bb 27       	eor	r27, r27
 80c:	f0 0d       	add	r31, r0
 80e:	b1 1d       	adc	r27, r1
 810:	63 9f       	mul	r22, r19
 812:	aa 27       	eor	r26, r26
 814:	f0 0d       	add	r31, r0
 816:	b1 1d       	adc	r27, r1
 818:	aa 1f       	adc	r26, r26
 81a:	64 9f       	mul	r22, r20
 81c:	66 27       	eor	r22, r22
 81e:	b0 0d       	add	r27, r0
 820:	a1 1d       	adc	r26, r1
 822:	66 1f       	adc	r22, r22
 824:	82 9f       	mul	r24, r18
 826:	22 27       	eor	r18, r18
 828:	b0 0d       	add	r27, r0
 82a:	a1 1d       	adc	r26, r1
 82c:	62 1f       	adc	r22, r18
 82e:	73 9f       	mul	r23, r19
 830:	b0 0d       	add	r27, r0
 832:	a1 1d       	adc	r26, r1
 834:	62 1f       	adc	r22, r18
 836:	83 9f       	mul	r24, r19
 838:	a0 0d       	add	r26, r0
 83a:	61 1d       	adc	r22, r1
 83c:	22 1f       	adc	r18, r18
 83e:	74 9f       	mul	r23, r20
 840:	33 27       	eor	r19, r19
 842:	a0 0d       	add	r26, r0
 844:	61 1d       	adc	r22, r1
 846:	23 1f       	adc	r18, r19
 848:	84 9f       	mul	r24, r20
 84a:	60 0d       	add	r22, r0
 84c:	21 1d       	adc	r18, r1
 84e:	82 2f       	mov	r24, r18
 850:	76 2f       	mov	r23, r22
 852:	6a 2f       	mov	r22, r26
 854:	11 24       	eor	r1, r1
 856:	9f 57       	subi	r25, 0x7F	; 127
 858:	50 40       	sbci	r21, 0x00	; 0
 85a:	9a f0       	brmi	.+38     	; 0x882 <__stack+0x23>
 85c:	f1 f0       	breq	.+60     	; 0x89a <__stack+0x3b>
 85e:	88 23       	and	r24, r24
 860:	4a f0       	brmi	.+18     	; 0x874 <__stack+0x15>
 862:	ee 0f       	add	r30, r30
 864:	ff 1f       	adc	r31, r31
 866:	bb 1f       	adc	r27, r27
 868:	66 1f       	adc	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	91 50       	subi	r25, 0x01	; 1
 870:	50 40       	sbci	r21, 0x00	; 0
 872:	a9 f7       	brne	.-22     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 874:	9e 3f       	cpi	r25, 0xFE	; 254
 876:	51 05       	cpc	r21, r1
 878:	80 f0       	brcs	.+32     	; 0x89a <__stack+0x3b>
 87a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_inf>
 87e:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_szero>
 882:	5f 3f       	cpi	r21, 0xFF	; 255
 884:	e4 f3       	brlt	.-8      	; 0x87e <__stack+0x1f>
 886:	98 3e       	cpi	r25, 0xE8	; 232
 888:	d4 f3       	brlt	.-12     	; 0x87e <__stack+0x1f>
 88a:	86 95       	lsr	r24
 88c:	77 95       	ror	r23
 88e:	67 95       	ror	r22
 890:	b7 95       	ror	r27
 892:	f7 95       	ror	r31
 894:	e7 95       	ror	r30
 896:	9f 5f       	subi	r25, 0xFF	; 255
 898:	c1 f7       	brne	.-16     	; 0x88a <__stack+0x2b>
 89a:	fe 2b       	or	r31, r30
 89c:	88 0f       	add	r24, r24
 89e:	91 1d       	adc	r25, r1
 8a0:	96 95       	lsr	r25
 8a2:	87 95       	ror	r24
 8a4:	97 f9       	bld	r25, 7
 8a6:	08 95       	ret

000008a8 <__fp_inf>:
 8a8:	97 f9       	bld	r25, 7
 8aa:	9f 67       	ori	r25, 0x7F	; 127
 8ac:	80 e8       	ldi	r24, 0x80	; 128
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	08 95       	ret

000008b4 <__fp_nan>:
 8b4:	9f ef       	ldi	r25, 0xFF	; 255
 8b6:	80 ec       	ldi	r24, 0xC0	; 192
 8b8:	08 95       	ret

000008ba <__fp_pscA>:
 8ba:	00 24       	eor	r0, r0
 8bc:	0a 94       	dec	r0
 8be:	16 16       	cp	r1, r22
 8c0:	17 06       	cpc	r1, r23
 8c2:	18 06       	cpc	r1, r24
 8c4:	09 06       	cpc	r0, r25
 8c6:	08 95       	ret

000008c8 <__fp_pscB>:
 8c8:	00 24       	eor	r0, r0
 8ca:	0a 94       	dec	r0
 8cc:	12 16       	cp	r1, r18
 8ce:	13 06       	cpc	r1, r19
 8d0:	14 06       	cpc	r1, r20
 8d2:	05 06       	cpc	r0, r21
 8d4:	08 95       	ret

000008d6 <__fp_round>:
 8d6:	09 2e       	mov	r0, r25
 8d8:	03 94       	inc	r0
 8da:	00 0c       	add	r0, r0
 8dc:	11 f4       	brne	.+4      	; 0x8e2 <__fp_round+0xc>
 8de:	88 23       	and	r24, r24
 8e0:	52 f0       	brmi	.+20     	; 0x8f6 <__fp_round+0x20>
 8e2:	bb 0f       	add	r27, r27
 8e4:	40 f4       	brcc	.+16     	; 0x8f6 <__fp_round+0x20>
 8e6:	bf 2b       	or	r27, r31
 8e8:	11 f4       	brne	.+4      	; 0x8ee <__fp_round+0x18>
 8ea:	60 ff       	sbrs	r22, 0
 8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <__fp_round+0x20>
 8ee:	6f 5f       	subi	r22, 0xFF	; 255
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	08 95       	ret

000008f8 <_exit>:
 8f8:	f8 94       	cli

000008fa <__stop_program>:
 8fa:	ff cf       	rjmp	.-2      	; 0x8fa <__stop_program>
